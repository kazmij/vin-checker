<?php

namespace App\AdminBundle\Repository;

use App\AdminBundle\Entity\Banner;
use Doctrine\ORM\Query;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\HttpFoundation\Request;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var Container
     */
    private $container;

    /**
     * @param Container $container
     */
    public function setContainer(Container $container)
    {
        $this->container = $container;
    }

    /**
     * @param Request $request
     */
    public function getPaginationQueryBuilder(Request $request)
    {
        $qb = $this->createQueryBuilder('b');
        $qb
            ->leftJoin('b.translations', 't')
            ->where($qb->expr()->eq('t.locale', $qb->expr()->literal($request->getLocale())));

        if ($request->get('query')) {
            $searchArr = explode(' ', trim($request->get('query')));
            $conditions = [];

            foreach ($searchArr as $search) {
                if (strlen($search) >= 3) {
                    $conditions[] = $qb->expr()->like('t.name', $qb->expr()->literal('%' . $search . '%'));
                }
            }

            if (!empty($conditions)) {
                $qb->andWhere(implode(' OR ', $conditions));
            }
        }

        if ($request->get('active')) {
            $qb->andWhere($qb->expr()->eq('b.active', 1));
        }

        if (!$request->get('sort')) {
            $qb->orderBy('b.createdAt', 'DESC');
        }


        return $qb;
    }

    /**
     * @param $place
     * @return array
     */
    public function getBanners($place)
    {
        $qb = $this->createQueryBuilder('b');

        $query = $qb
            ->join('b.places', 'p')
            ->andWhere($qb->expr()->eq('b.active', 1))
            ->andWhere($qb->expr()->eq('p.type', $qb->expr()->literal($place)))
            ->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('banner_place_' . $place . self::getClassName());
        }

        return $query->getResult();
    }
}
