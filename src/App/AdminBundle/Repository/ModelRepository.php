<?php

namespace App\AdminBundle\Repository;

use App\AdminBundle\Repository\ContentRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\DependencyInjection\Container;

/**
 * ModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelRepository extends ContentRepository
{

    /**
     * @var Request
     */
    private $request;

    /**
     * @var Container
     */
    private $container;

    /**
     * @param Container $container
     */
    public function setContainer(Container $container)
    {
        $this->container = $container;
        $this->request = $container->get('request_stack')->getCurrentRequest();
    }

    public function getChoices($manufacturerId = null)
    {
        if ($this->request->get('manufacturer') || $manufacturerId) {
            $qb = $this->createQueryBuilder('m');
            $choices = $qb->andWhere($qb->expr()->isNotNull('m.name'))
                ->andWhere($qb->expr()->neq('m.name', $qb->expr()->literal('')))
                ->andWhere($qb->expr()->eq('m.manufacturer', $manufacturerId ? $manufacturerId : $this->request->get('manufacturer')))
                ->getQuery()
                ->getResult();
        } else {
            $qb = $this->createQueryBuilder('m');
            $choices = $qb->andWhere($qb->expr()->isNotNull('m.name'))
                ->andWhere($qb->expr()->neq('m.name', $qb->expr()->literal('')))
                ->getQuery()
                ->getResult();
        }

        $data = [];
        foreach ($choices as $choice) {
            $data[$choice->getName()] = $choice->getId();
        }

        return $data;
    }

}