<?php

namespace App\AdminBundle\Repository;

use App\AdminBundle\Entity\Category;
use Doctrine\ORM\QueryBuilder;
use Knp\DoctrineBehaviors\ORM as ORMBehaviors;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Router;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    use ORMBehaviors\Tree\Tree;

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Router
     */
    private $router;

    /**
     * @var bool
     */
    private $listMode = false;

    /**
     * @var string
     */
    private $type;

    /**
     * @param Container $container
     */
    public function setContainer(Container $container)
    {
        $this->container = $container;
        $this->router = $container->get('router');
    }

    /**
     * @param $activeCategory
     * @return array
     */
    public function getJsTree($type, $activeCategory = null, $listMode = false)
    {
        $this->type = $type;
        $this->listMode = $listMode;
        $this->parentCategory = null;
        $disableRoot = false;
        if ($activeCategory && $activeCategory instanceof Category && $activeCategory->getId()) {
            $paths = explode('/', $activeCategory->getParentMaterializedPath());
            $this->parentCategory = (int)end($paths);
            $tree = $this->buildTree($this->getTreeExceptNodeAndItsChildrenQB($activeCategory)->getQuery()->execute());
        } elseif ($activeCategory && is_object($activeCategory) && method_exists($activeCategory, 'getCategory')) {
            if ($activeCategory->getCategory()) {
                $this->parentCategory = $activeCategory->getCategory()->getId();
            }
            $tree = $this->getRootNodes();
            $disableRoot = true;
        } else {
            $tree = $this->getRootNodes();
        }

        $flatTree = [];
        $flatTree[0] = [
            'id' => 0,
            'text' => 'Root',
            'state' => [
                'opened' => true,
                'disabled' => $disableRoot,
                'selected' => $disableRoot ? false : !$this->parentCategory,
            ]
        ];
        if ($tree) {
            if (!is_array($tree)) {
                $tree = [$tree];
            }

            foreach ($tree as $t) {
                $flatTree[0]['children'][] = [
                    'id' => $t->getId(),
                    'text' => $this->getLeafText($t),
                    'state' => [
                        'opened' => true,
                        'disabled' => false,
                        'selected' => $this->parentCategory == $t->getId(),
                    ],
                    'children' => $this->getFlatArrayTree($t->getChildNodes())
                ];
            }
        }

        return $flatTree;
    }

    /**
     * @param $tree
     * @param array $flatTree
     * @return array
     */
    private function getFlatArrayTree($tree, $flatTree = [])
    {
        if ($tree) {
            foreach ($tree as $key => $leaf) {
                $flatTree[$key] = [
                    'id' => $leaf->getId(),
                    'text' => $this->getLeafText($leaf),
                    'state' => [
                        'opened' => true,
                        'disabled' => false,
                        'selected' => $this->parentCategory == $leaf->getId(),
                    ],
                ];

                $children = $this->getFlatArrayTree($leaf->getChildNodes());
                if ($children) {
                    $flatTree[$key]['children'] = $children;
                }
            }
        }

        return $flatTree;
    }

    /**
     * Get leaf name
     *
     * @param Category $leaf
     * @return string
     */
    private function getLeafText(Category $leaf)
    {
        $text = $leaf->translate()->getName();

        if ($this->listMode) {
            $linkEditHtml = ' <span onclick="categoryActionClick(this)" class="categoryHover" title="Edit category" data-href="' . ($this->router->generate('category_edit', ['id' => $leaf->getId(), 'type' => $this->type])) . '"><i class="fa fa-pencil-square-o text-info" aria-hidden="true"></i></span>';
            $linkDeleteHtml = ' <span onclick="categoryActionClick(this)" class="categoryHover confirmAction" title="Delete category" data-href="' . ($this->router->generate('category_delete', ['id' => $leaf->getId(), 'type' => $this->type])) . '"><i class="fa fa-trash text-info" aria-hidden="true"></i></span>';
            $text .= $linkEditHtml . $linkDeleteHtml;
        }

        return $text;
    }

    /**
     * @param QueryBuilder $qb
     */
    final protected function addFlatTreeConditions(QueryBuilder $qb)
    {
        $qb->andWhere($qb->expr()->eq('t.type', $qb->expr()->literal($this->type)));
    }

    public function getRootNodesQB($rootAlias = 't')
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        return $this->createQueryBuilder($rootAlias)
            ->andWhere($rootAlias . '.materializedPath = :empty or ' . $rootAlias .'.materializedPath is null')
            ->andWhere('t.type  = :type')
            ->setParameter('empty', '')
            ->setParameter('type', $this->type);
    }

    public function getCategories($type = null)
    {
        $qb = $this->createQueryBuilder('c');

        if ($type) {
            $qb->where('c.type = :type')
                ->setParameter('type', $type);
        }

        $query = $qb->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            if(!$type) {
                $type = 'null';
            }
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('categories_list_' . $type . self::getClassName());
        }

        $result = $query->getResult();
        return $result;
    }

    /**
     * Extracts the root node and constructs a tree using flat resultset
     *
     * @param Iterable|array $results a flat resultset
     *
     * @return NodeInterface
     */
    public function buildTree($results)
    {
        if (!count($results)) {
            return;
        }

        $root = $results[0];
        $root->buildTree($results);

        return $root;
    }

}
