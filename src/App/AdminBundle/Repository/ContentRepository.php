<?php

namespace App\AdminBundle\Repository;

use App\AdminBundle\Entity\Portal;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\AbstractQuery;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\DependencyInjection\Container;

/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Request
     */
    private $request;

    /**
     * @param Container $container
     */
    public function setContainer(Container $container)
    {
        $this->container = $container;
        $this->request = $container->get('request_stack')->getCurrentRequest();
    }


    /**
     * @param $slug
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBySlug($slug)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $this->createQueryBuilder('c')
            ->join('c.translations', 't')
            ->where('t.slug = :slug')
            ->andWhere('c.active = 1');

        $query = $query
            ->setParameter('slug', $slug)
            ->setMaxResults(1)
            ->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('id_by_slug_' . $slug . self::getClassName());
        }
        $entries = $query->getResult();

        if ($entries) {
            return $entries[0];
        }

        return false;
    }

    /**
     * @param Request $request
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getPaginationQueryBuilder(Request $request)
    {
        $qb = $this->createQueryBuilder('c')
            ->join('c.translations', 't');

        if ($request->get('search')) {
            $searchArr = explode(' ', trim($request->get('search')));
            $conditions = [];

            foreach ($searchArr as $search) {
                $conditions[] = $qb->expr()->like('t.name', $qb->expr()->literal('%' . $search . '%'));
                $conditions[] = $qb->expr()->like('t.description', $qb->expr()->literal('%' . $search . '%'));
            }

            $qb->andWhere(implode(' OR ', $conditions));
        }

        $qb->andWhere($qb->expr()->not('c INSTANCE OF App\AdminBundle\Entity\Portal'));
        $qb->andWhere($qb->expr()->not('c INSTANCE OF App\AdminBundle\Entity\EventToAttribute'));
        $qb->andWhere($qb->expr()->not('c INSTANCE OF App\AdminBundle\Entity\EventSchedule'));
        $qb->andWhere($qb->expr()->not('c INSTANCE OF App\AdminBundle\Entity\Image'));
        $qb->andWhere($qb->expr()->not('c INSTANCE OF App\AdminBundle\Entity\Block'));

        if ($request->get('category')) {
            $qb->join('e.category', 'c')
                ->andWhere($qb->expr()->eq('c.id', $request->get('category')));
        }

        // Current portal query
        if ($request->get('portal')) {
            if ($request->get('portal') == Portal::MAIN_PORTAL_ID) {
                $qb->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
            } else {
                $qb->join('c.portals', 'p')
                    ->andWhere($qb->expr()->in('p.id', $request->get('portal')));
            }
        } else {
            //$qb->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
        }

        if ($request->get('sortType')) {
            switch ($request->get('sortType')) {
                case 'alphabetically_asc':
                    $qb->orderBy('t.name', 'ASC');
                    break;
                case 'alphabetically_desc':
                    $qb->orderBy('t.name', 'DESC');
                    break;
                case 'chronologically_asc':
                    $qb->orderBy('c.id', 'ASC');
                    break;
                case 'chronologically_desc':
                    $qb->orderBy('c.id', 'DESC');
                    break;
            }
        }

        $qb
            ->andWhere($qb->expr()->eq('c.active', true))
            ->groupBy('c.id');

        return $qb;
    }

    /**
     * @param string $type
     * @return Content
     */
    public function getContentByType($type)
    {
        return $this->findOneByType($type);
    }

    /**
     * Get min year
     *
     * @return bool|string
     */
    public function getMinYear()
    {
        $qb = $this->createQueryBuilder('c');
        $minDate = $qb->select($qb->expr()->min('c.createdAt'))
            ->getQuery()
            ->getResult(AbstractQuery::HYDRATE_SINGLE_SCALAR);

        if ($minDate) {
            $date = \DateTime::createFromFormat('Y-m-d H:i:s', $minDate);

            return $date->format('Y');
        } else {

            return date('Y');
        }
    }

    /**
     * @param $type
     * @param Portal $portal
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getUsingTypeAndPortal($type, Portal $portal = null)
    {
        $qb = $this->createQueryBuilder('c');
        $query = $qb->leftJoin('c.portals', 'p')
            ->where($qb->expr()->eq('c.type', $qb->expr()->literal($type)));

        if ($portal) {
            if ($portal->getId() == Portal::MAIN_PORTAL_ID) {
                $qb->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
            } else {
                $query->andWhere($qb->expr()->eq('p.id', $portal->getId()));
            }
        } else {
            //$query->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
        }

        $query = $query->setMaxResults(1)
            ->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('id_by_type_and_portal_' . $type . self::getClassName());
        }

        $result = $query->getResult();

        if ($result) {
            return $result[0];
        }

        return false;
    }

    /**
     * @param $slug
     * @param Portal $portal
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getUsingSlugAndPortal($slug, Portal $portal = null)
    {
        $qb = $this->createQueryBuilder('c');

        $query = $qb->join('c.portals', 'p')
            ->join('c.translations', 't')
            ->where($qb->expr()->eq('t.slug', $qb->expr()->literal($slug)));

        if ($portal) {
            if ($portal->getId() == Portal::MAIN_PORTAL_ID) {
                $qb->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
            } else {
                $query->andWhere($qb->expr()->eq('p.id', $portal->getId()));
            }
        } elseif (!strpos($this->request->getUri(), 'admin')) {
            //$qb->andWhere($qb->expr()->orX($qb->expr()->isNull('p.id'), $qb->expr()->eq('p.id', Portal::MAIN_PORTAL_ID)));
        }

        $query = $query
            ->setMaxResults(1)
            ->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('id_by_slug_and_portal_' . $slug . ($portal ? $portal->getId() : 'null') . self::getClassName());
        }

        $result = $query->getResult();

        if (count($result)) {
            return $result[0];
        }

        return false;
    }

    public function findOneByType($type)
    {
        $qb = $this->createQueryBuilder('c');

        $query = $qb->where($qb->expr()->eq('c.type', $qb->expr()->literal($type)))
            ->andWhere($qb->expr()->eq('c.active', 1));

        $query = $query
            ->setMaxResults(1)
            ->getQuery();

        if ($this->container->get('app.helper')->isFront()) {
            $query->useQueryCache(true)
                ->useResultCache(true)
                ->setResultCacheId('find_one_by_type_' . $type . self::getClassName());
        }

        $result = $query->getResult();

        if (count($result)) {
            return $result[0];
        }

        return false;
    }
}


