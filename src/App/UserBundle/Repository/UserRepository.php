<?php

namespace App\UserBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\HttpFoundation\Request;

class UserRepository extends EntityRepository implements UserLoaderInterface
{

    /**
     * @var Container
     */
    private $container;

    /**
     * @param Container $container
     */
    public function setContainer(Container $container)
    {
        $this->container = $container;
    }

    public function loadUserByUsername($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active admin AppBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message);
        }

        return $user;
    }

    /**
     * @param Request $request
     */
    public function getPaginationQueryBuilder(Request $request)
    {
        $qb = $this->createQueryBuilder('u');

        if ($request->attributes->get('role')) {
            $qb
                ->where($qb->expr()->like('u.roles', $qb->expr()->literal('%' . $request->attributes->get('role') . '%')));
        }

        if ($request->get('query')) {
            $searchArr = explode(' ', trim($request->get('query')));
            $conditions = [];

            foreach ($searchArr as $search) {
                if (strlen($search) >= 3) {
                    $conditions[] = $qb->expr()->like('u.username', $qb->expr()->literal('%' . $search . '%'));
                    $conditions[] = $qb->expr()->like('u.email', $qb->expr()->literal('%' . $search . '%'));
                    $conditions[] = $qb->expr()->like('u.firstname', $qb->expr()->literal('%' . $search . '%'));
                    $conditions[] = $qb->expr()->like('u.lastname', $qb->expr()->literal('%' . $search . '%'));
                }
            }

            if (!empty($conditions)) {
                $qb->andWhere(implode(' OR ', $conditions));
            }
        }

        if ($request->get('active')) {
            $qb->andWhere($qb->expr()->eq('u.enabled', 1));
        }

        if (!$request->get('sort')) {
            $qb->orderBy('u.createdAt', 'DESC');
        }


        return $qb;
    }
}
